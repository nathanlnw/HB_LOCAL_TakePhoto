---- JT808Conf_struct Matches (575 in 16 files) ----
App_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):      if(0==JT808Conf_struct.Regsiter_Status)    //注册   
App_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):  if((1==DEV_Login.Operate_enable)&&(DEV_Login.Sd_add<5)&&(JT808Conf_struct.Regsiter_Status==1))
App_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):	     //   Speed_cacu=(Delta_1s_Plus*36000)/JT808Conf_struct.Vech_Character_Value;	// 计算的速度    
App_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):				  memcpy(Dialstr+3,JT808Conf_struct.LISTEN_Num,strlen((const char*)JT808Conf_struct.LISTEN_Num));
App_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):				  memcpy(Dialstr+3+strlen((const char*)JT808Conf_struct.LISTEN_Num),";\r\n",3);	
App_hmi.c (bsp\stm32f407vgt6_recdrv\app_712\hmi):	memcpy(dayin_chepaihaoma+11,JT808Conf_struct.Vechicle_Info.Vech_Num,8);    //  2
App_hmi.c (bsp\stm32f407vgt6_recdrv\app_712\hmi):	memcpy(dayin_chepaifenlei+11,JT808Conf_struct.Vechicle_Info.Vech_Type,6);  //  3
App_hmi.c (bsp\stm32f407vgt6_recdrv\app_712\hmi):	memcpy(dayin_cheliangVIN+10,JT808Conf_struct.Vechicle_Info.Vech_VIN,17);   //  4
App_hmi.c (bsp\stm32f407vgt6_recdrv\app_712\hmi):	memcpy(dayin_driver_NUM+13,JT808Conf_struct.Driver_Info.DriveName,21);    //5
App_hmi.c (bsp\stm32f407vgt6_recdrv\app_712\hmi):	memcpy(dayin_driver_card+13,JT808Conf_struct.Driver_Info.DriverCard_ID,18);//6
App_hmi.c (bsp\stm32f407vgt6_recdrv\app_712\hmi):	rt_kprintf("\r\nJT808Conf_struct.password_flag=%d\r\n",JT808Conf_struct.password_flag); 
App_hmi.c (bsp\stm32f407vgt6_recdrv\app_712\hmi):	if(JT808Conf_struct.password_flag==0)
App_hmi.c (bsp\stm32f407vgt6_recdrv\app_712\hmi):		JT808Conf_struct.Regsiter_Status=0;   //需要重新注册
Device_485.c (bsp\stm32f407vgt6_recdrv\app_712\u4_485):				   sprintf(send,"\r\n\r\n车牌号:   %s",JT808Conf_struct.Vechicle_Info.Vech_Num,strlen((const char*)(JT808Conf_struct.Vechicle_Info.Vech_Num)));
Device_485.c (bsp\stm32f407vgt6_recdrv\app_712\u4_485):				    //sprintf(send,"\r\n车辆类型: %s",JT808Conf_struct.Vechicle_Info.Vech_Type,strlen((const char*)(JT808Conf_struct.Vechicle_Info.Vech_Type)));
Device_485.c (bsp\stm32f407vgt6_recdrv\app_712\u4_485):					    memset((u8*)&JT808Conf_struct.Vechicle_Info.Vech_Num,0,sizeof(JT808Conf_struct.Vechicle_Info.Vech_Num));	//clear	
Device_485.c (bsp\stm32f407vgt6_recdrv\app_712\u4_485):					   memcpy(JT808Conf_struct.Vechicle_Info.Vech_Num,dwin_reg,strlen(dwin_reg));
Device_485.c (bsp\stm32f407vgt6_recdrv\app_712\u4_485):					   Api_Config_Recwrite_Large(jt808,0,(u8*)&JT808Conf_struct,sizeof(JT808Conf_struct));    
Device_gsm.c (bsp\stm32f407vgt6_recdrv\app_712\gsm):								     if(1==JT808Conf_struct.Regsiter_Status)  
Device_gsm.c (bsp\stm32f407vgt6_recdrv\app_712\gsm):              if((GSM_PWR.GSM_power_over==1) &&(JT808Conf_struct.password_flag ==1) ) 
Flash_Oper.c (bsp\stm32f407vgt6_recdrv\app_712\dataflash):								memcpy(content+wr_add,JT808Conf_struct.Driver_Info.DriverCard_ID,18);
Menu_1_Idle.c (bsp\stm32f407vgt6_recdrv\app_712\lcd):if(JT808Conf_struct.LOAD_STATE==1)
Menu_1_Idle.c (bsp\stm32f407vgt6_recdrv\app_712\lcd):else if(JT808Conf_struct.LOAD_STATE==2)
Menu_1_Idle.c (bsp\stm32f407vgt6_recdrv\app_712\lcd):else if(JT808Conf_struct.LOAD_STATE==3)
Menu_1_Idle.c (bsp\stm32f407vgt6_recdrv\app_712\lcd):	JT808Conf_struct.password_flag=0;     // clear  first flag		
Menu_1_Idle.c (bsp\stm32f407vgt6_recdrv\app_712\lcd):	Api_Config_Recwrite_Large(jt808,0,(u8*)&JT808Conf_struct,sizeof(JT808Conf_struct));    
Menu_2_4_CarInfor.c (bsp\stm32f407vgt6_recdrv\app_712\lcd):		memcpy(vech_num+7,JT808Conf_struct.Vechicle_Info.Vech_Num,8);
Menu_2_4_CarInfor.c (bsp\stm32f407vgt6_recdrv\app_712\lcd):               switch(JT808Conf_struct.Vechicle_Info.Dev_Color)
Menu_2_4_CarInfor.c (bsp\stm32f407vgt6_recdrv\app_712\lcd):		memcpy(vech_type+9,JT808Conf_struct.Vechicle_Info.Vech_Type,6);
Menu_2_4_CarInfor.c (bsp\stm32f407vgt6_recdrv\app_712\lcd):		if(JT808Conf_struct.DF_K_adjustState)
Menu_2_4_CarInfor.c (bsp\stm32f407vgt6_recdrv\app_712\lcd):		 memcpy(vech_VIN+3,JT808Conf_struct.Vechicle_Info.Vech_VIN,17); 
Menu_2_5_DriverInfor.c (bsp\stm32f407vgt6_recdrv\app_712\lcd):	lcd_text12(42,19,(char *)JT808Conf_struct.Driver_Info.DriveName,strlen((char *)JT808Conf_struct.Driver_Info.DriveName),LCD_MODE_SET);
Menu_2_5_DriverInfor.c (bsp\stm32f407vgt6_recdrv\app_712\lcd):	lcd_text12(6,19,(char *)JT808Conf_struct.Driver_Info.DriverCard_ID,18,LCD_MODE_SET);
Menu_2_6_Mileage.c (bsp\stm32f407vgt6_recdrv\app_712\lcd):	DisKm=JT808Conf_struct.Distance_m_u32/1000;//单位:m
Menu_3_2_FullorEmpty.c (bsp\stm32f407vgt6_recdrv\app_712\lcd):                     JT808Conf_struct.LOAD_STATE=CarStatus_change;
Menu_3_2_FullorEmpty.c (bsp\stm32f407vgt6_recdrv\app_712\lcd):			Api_Config_Recwrite_Large(jt808,0,(u8*)&JT808Conf_struct,sizeof(JT808Conf_struct));
Menu_3_8_LogOut.c (bsp\stm32f407vgt6_recdrv\app_712\lcd):				    JT808Conf_struct.Regsiter_Status=0; 
Menu_3_8_LogOut.c (bsp\stm32f407vgt6_recdrv\app_712\lcd):				    memcpy(Reg_buf,JT808Conf_struct.ConfirmCode,20);
Menu_3_8_LogOut.c (bsp\stm32f407vgt6_recdrv\app_712\lcd):				    Reg_buf[20]=JT808Conf_struct.Regsiter_Status;			
Menu_3_8_LogOut.c (bsp\stm32f407vgt6_recdrv\app_712\lcd):		                  Api_Config_Recwrite_Large(jt808,0,(u8*)&JT808Conf_struct,sizeof(JT808Conf_struct));   
Menu_5_6_Concuss.c (bsp\stm32f407vgt6_recdrv\app_712\lcd):concuss_step=JT808Conf_struct.concuss_step;
Menu_5_6_Concuss.c (bsp\stm32f407vgt6_recdrv\app_712\lcd):				JT808Conf_struct.concuss_step=concuss_step;
Menu_5_6_Concuss.c (bsp\stm32f407vgt6_recdrv\app_712\lcd):				Api_Config_Recwrite_Large(jt808,0,(u8*)&JT808Conf_struct,sizeof(JT808Conf_struct));
Menu_5_8_usb.c (bsp\stm32f407vgt6_recdrv\app_712\lcd):	memcpy(write_da+17,JT808Conf_struct.Vechicle_Info.Vech_Num,12);//车牌号12
Menu_5_8_usb.c (bsp\stm32f407vgt6_recdrv\app_712\lcd):	memcpy(write_da+29,JT808Conf_struct.Vechicle_Info.Vech_Type,12);//车牌分类12
Menu_5_8_usb.c (bsp\stm32f407vgt6_recdrv\app_712\lcd):	memcpy(write_da+41,JT808Conf_struct.Driver_Info.DriveCode,3);//  驾驶员代码3
Menu_5_8_usb.c (bsp\stm32f407vgt6_recdrv\app_712\lcd):	memcpy(write_da+44,JT808Conf_struct.Driver_Info.DriverCard_ID,18);//驾驶证号码18
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):                   JT808Conf_struct.Msg_Float_ID=0;
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):                    Api_Config_Recwrite_Large(jt808,0,(u8*)&JT808Conf_struct,sizeof(JT808Conf_struct));   
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):		    //JT808Conf_struct.Regsiter_Status=1; //标注注册，但不存储		  
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):            if((1==JT808Conf_struct.DURATION.Heart_SDFlag)&&(DataLink_Status())&&(SleepState==0)) //  心跳
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):                  JT808Conf_struct.DURATION.Heart_SDFlag=0;
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):				  JT808Conf_struct.DURATION.TCP_SD_state=1;  //发送完后置 1   
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):			     if(JT808Conf_struct.Speed_GetType==0)
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):	   if(JT808Conf_struct.Speed_GetType)  // 通过速度传感器 获取速度
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):              if(JT808Conf_struct.DF_K_adjustState==0)
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):					 JT808Conf_struct.Distance_m_u32+=reg;
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):					 if(JT808Conf_struct.Distance_m_u32>0xFFFFFF)
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):							  JT808Conf_struct.Distance_m_u32=0; 	  //里程最长这么多米	
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):                     if(1==JT808Conf_struct.SD_MODE.DIST_TOTALMODE)
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):					 JT808Conf_struct.Distance_m_u32+=sp/3600;  // 除以3600 是m/s 
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):					 if(JT808Conf_struct.Distance_m_u32>0xFFFFFF)
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):							  JT808Conf_struct.Distance_m_u32=0; 	  //里程最长这么多米	  
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):                     if(1==JT808Conf_struct.SD_MODE.DIST_TOTALMODE)
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):       if(0==JT808Conf_struct.Speed_GetType)  
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):        if(JT808Conf_struct.Speed_GetType)  // 通过速度传感器 获取速度
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):	  JT808Conf_struct.DayStartDistance_32=JT808Conf_struct.Distance_m_u32;
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):          Api_Config_Recwrite_Large(jt808,0,(u8*)&JT808Conf_struct,sizeof(JT808Conf_struct)); 
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):  if(1==JT808Conf_struct.SD_MODE.DUR_TOTALMODE)   // 定时上报模式
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):    Speed_cacu=(Delta_1s_Plus*36000)/JT808Conf_struct.Vech_Character_Value;  // 通过计算得到的速度 
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):    Distance_1s_m=(Delta_1s_Plus*1000)/JT808Conf_struct.Vech_Character_Value;  // 每秒运行多少米
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):		  JT808Conf_struct.Distance_m_u32+=Distance_1s_m;	// 除以3600 是m/s 
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):		  if(JT808Conf_struct.Distance_m_u32>0xFFFFFF)
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):				   JT808Conf_struct.Distance_m_u32=0;	   //里程最长这么多米	   
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):  if(JT808Conf_struct.DF_K_adjustState)   // 只有没校准时才有效
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):		   JT808Conf_struct.Vech_Character_Value=1000*Reg_plusNum/Reg_distance;
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):		   JT808Conf_struct.DF_K_adjustState=1;					// clear  Flag
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):		   Api_Config_Recwrite_Large(jt808,0,(u8*)&JT808Conf_struct,sizeof(JT808Conf_struct));   
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):		     Original_info[Original_info_Wr++]=( JT808Conf_struct.Msg_Float_ID>>8); //消息流水号
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):	            Original_info[Original_info_Wr++]= JT808Conf_struct.Msg_Float_ID;		
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):   JT808Conf_struct.Msg_Float_ID++;   
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):    Original_info[Original_info_Wr++]=(u8)(JT808Conf_struct.Vechicle_Info.Dev_ProvinceID>>8);
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):    Original_info[Original_info_Wr++]=(u8)JT808Conf_struct.Vechicle_Info.Dev_ProvinceID;
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):    Original_info[Original_info_Wr++]=(u8)(JT808Conf_struct.Vechicle_Info.Dev_CityID>>8);
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):    Original_info[Original_info_Wr++]=(u8)JT808Conf_struct.Vechicle_Info.Dev_CityID;   
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):	Original_info[Original_info_Wr++]=JT808Conf_struct.Vechicle_Info.Dev_Color;
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):	memcpy(Original_info+Original_info_Wr,JT808Conf_struct.Vechicle_Info.Vech_Num,13);  
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):	 memcpy(Original_info+Original_info_Wr,JT808Conf_struct.ConfirmCode,strlen((const char*)JT808Conf_struct.ConfirmCode));   // 鉴权码  string Type
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):	 Original_info_Wr+=strlen((const char*)JT808Conf_struct.ConfirmCode); 
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):   Dis_01km=JT808Conf_struct.Distance_m_u32/100;
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):    if( GPS_speed <=( JT808Conf_struct.Speed_warn_MAX*10) )
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):	 Dis_01km=JT808Conf_struct.Distance_m_u32/100;
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):	 Dis_01km=JT808Conf_struct.Distance_m_u32/100;
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):		Original_info[Original_info_Wr++]=strlen((const char*)JT808Conf_struct.Vechicle_Info.Vech_Num); // 参数长度
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):		memcpy( ( char * ) Original_info+ Original_info_Wr, ( char * )JT808Conf_struct.Vechicle_Info.Vech_Num,strlen((const char*)JT808Conf_struct.Vechicle_Info.Vech_Num) ); // 参数值
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):		Original_info_Wr+=strlen((const char*)JT808Conf_struct.Vechicle_Info.Vech_Num); 
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):		Original_info[Original_info_Wr++]=(JT808Conf_struct.DURATION.Default_Dur>>24);   // 参数值 
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):		Original_info[Original_info_Wr++]=(JT808Conf_struct.DURATION.Default_Dur>>16);
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):		Original_info[Original_info_Wr++]=(JT808Conf_struct.DURATION.Default_Dur>>8);
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):		Original_info[Original_info_Wr++]=(JT808Conf_struct.DURATION.Default_Dur);     
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):		Original_info[Original_info_Wr++]=strlen((const char*)JT808Conf_struct.LISTEN_Num); // 参数长度
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):		memcpy( ( char * ) Original_info+ Original_info_Wr, ( char * )JT808Conf_struct.LISTEN_Num,strlen((const char*)JT808Conf_struct.LISTEN_Num)); // 参数值
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):		Original_info_Wr+=strlen((const char*)JT808Conf_struct.LISTEN_Num);
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):		Original_info[Original_info_Wr++]=( JT808Conf_struct.Speed_warn_MAX>>24);   // 参数值
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):		Original_info[Original_info_Wr++]=( JT808Conf_struct.Speed_warn_MAX>>16);  
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):		Original_info[Original_info_Wr++]=( JT808Conf_struct.Speed_warn_MAX>>8);
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):		Original_info[Original_info_Wr++]=( JT808Conf_struct.Speed_warn_MAX);
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):							   memcpy(Original_info+Original_info_Wr,JT808Conf_struct.Driver_Info.DriveCode,3);  
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):							   memcpy(Original_info+Original_info_Wr,JT808Conf_struct.Driver_Info.DriverCard_ID,18); //信息内容
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):							   regdis=JT808Conf_struct.Distance_m_u32/100;  //单位0.1km 
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):							   Original_info[Original_info_Wr++]=(u8)(JT808Conf_struct.Vech_Character_Value>>16);
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):							   Original_info[Original_info_Wr++]=(u8)(JT808Conf_struct.Vech_Character_Value>>8); 
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):							   Original_info[Original_info_Wr++]=(u8)(JT808Conf_struct.Vech_Character_Value);  
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):							   memcpy(Original_info+Original_info_Wr,JT808Conf_struct.Vechicle_Info.Vech_VIN,17); //信息内容
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):							   memcpy(Original_info+Original_info_Wr,JT808Conf_struct.Vechicle_Info.Vech_Num,12);
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):							   memcpy(Original_info+Original_info_Wr,JT808Conf_struct.Vechicle_Info.Vech_Type,12);	
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):							   regdis=(JT808Conf_struct.Distance_m_u32-JT808Conf_struct.DayStartDistance_32)/100;  //单位0.1km 
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):										 memcpy(Original_info+Original_info_Wr,JT808Conf_struct.Driver_Info.DriverCard_ID,18); //机动车驾驶证号
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):						  //   JT808Conf_struct.Vech_Character_Value=((u32)(*InStr)<<24)+((u32)(*InStr+1)<<16)+((u32)(*InStr+2)<<8)+(u32)(*InStr+3); // 特征系数   速度脉冲系数
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):						  //   Api_Config_Recwrite_Large(jt808,0,(u8*)&JT808Conf_struct,sizeof(JT808Conf_struct));   
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):        i=strlen((const char*) JT808Conf_struct.Driver_Info.DriveName);
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):	    memcpy(Original_info+Original_info_Wr,JT808Conf_struct.Driver_Info.DriveName,i);// name
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):        memcpy(Original_info+Original_info_Wr,JT808Conf_struct.Driver_Info.Driver_ID,20);// 身份证号码
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):		memcpy(Original_info+Original_info_Wr,JT808Conf_struct.Driver_Info.Drv_CareerID,40);//从业资格证
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):		i=strlen((const char*)JT808Conf_struct.Driver_Info.Comfirm_agentID); // 机构名称
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):		memcpy(Original_info+Original_info_Wr,JT808Conf_struct.Driver_Info.Comfirm_agentID,i);
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):  MediaIndex.MediaID= JT808Conf_struct.Msg_Float_ID;   
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):					JT808Conf_struct.DURATION.Heart_Dur=(Content[0]<<24)+(Content[1]<<16)+(Content[2]<<8) +Content[3];
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):                                    Api_Config_Recwrite_Large(jt808,0,(u8*)&JT808Conf_struct,sizeof(JT808Conf_struct));
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):                                   rt_kprintf("\r\n 心跳包间隔: %d s\r\n",JT808Conf_struct.DURATION.Heart_Dur);
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):					JT808Conf_struct.DURATION.TCP_ACK_Dur=(Content[0]<<24)+(Content[1]<<16)+(Content[2]<<8) +Content[3];
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):                    Api_Config_Recwrite_Large(jt808,0,(u8*)&JT808Conf_struct,sizeof(JT808Conf_struct));
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):					rt_kprintf("\r\n TCP消息应答间隔: %d s\r\n",JT808Conf_struct.DURATION.TCP_ACK_Dur); 
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):					JT808Conf_struct.DURATION.TCP_ReSD_Num=(Content[0]<<24)+(Content[1]<<16)+(Content[2]<<8) +Content[3];
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):                    Api_Config_Recwrite_Large(jt808,0,(u8*)&JT808Conf_struct,sizeof(JT808Conf_struct));
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):					rt_kprintf("\r\n TCP重传次数: %d\r\n",JT808Conf_struct.DURATION.TCP_ReSD_Num); 
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):					JT808Conf_struct.DURATION.UDP_ACK_Dur=(Content[0]<<24)+(Content[1]<<16)+(Content[2]<<8) +Content[3];
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):                    Api_Config_Recwrite_Large(jt808,0,(u8*)&JT808Conf_struct,sizeof(JT808Conf_struct));
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):                    rt_kprintf("\r\n UDP应答超时: %d\r\n",JT808Conf_struct.DURATION.UDP_ACK_Dur);
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):					JT808Conf_struct.DURATION.UDP_ReSD_Num=(Content[0]<<24)+(Content[1]<<16)+(Content[2]<<8) +Content[3];
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):                    Api_Config_Recwrite_Large(jt808,0,(u8*)&JT808Conf_struct,sizeof(JT808Conf_struct));
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):					rt_kprintf("\r\n UDP重传次数: %d\r\n",JT808Conf_struct.DURATION.UDP_ReSD_Num); 
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):					JT808Conf_struct.DURATION.NoDrvLogin_Dur=(Content[0]<<24)+(Content[1]<<16)+(Content[2]<<8) +Content[3];
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):                                    Api_Config_Recwrite_Large(jt808,0,(u8*)&JT808Conf_struct,sizeof(JT808Conf_struct));
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):                                   rt_kprintf("\r\n 驾驶员未登录汇报间隔: %d\r\n",JT808Conf_struct.DURATION.NoDrvLogin_Dur);  
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):					JT808Conf_struct.DURATION.Sleep_Dur=(Content[0]<<24)+(Content[1]<<16)+(Content[2]<<8) +Content[3];
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):                    Api_Config_Recwrite_Large(jt808,0,(u8*)&JT808Conf_struct,sizeof(JT808Conf_struct));
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):                    rt_kprintf("\r\n 休眠汇报时间间隔: %d \r\n",JT808Conf_struct.DURATION.Sleep_Dur);   
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):					JT808Conf_struct.DURATION.Emegence_Dur=(Content[0]<<24)+(Content[1]<<16)+(Content[2]<<8) +Content[3];
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):                   Api_Config_Recwrite_Large(jt808,0,(u8*)&JT808Conf_struct,sizeof(JT808Conf_struct)); 
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):                    rt_kprintf("\r\n 紧急报警时间间隔: %d \r\n",JT808Conf_struct.DURATION.Emegence_Dur);   
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):					JT808Conf_struct.DURATION.Default_Dur=(Content[0]<<24)+(Content[1]<<16)+(Content[2]<<8) +Content[3];
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):                    Api_Config_Recwrite_Large(jt808,0,(u8*)&JT808Conf_struct,sizeof(JT808Conf_struct));   
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):					rt_kprintf("\r\n 缺省汇报时间间隔: %d \r\n",JT808Conf_struct.DURATION.Default_Dur);   
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):					JT808Conf_struct.DISTANCE.Defalut_DistDelta=(Content[0]<<24)+(Content[1]<<16)+(Content[2]<<8) +Content[3];
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):                    Api_Config_Recwrite_Large(jt808,0,(u8*)&JT808Conf_struct,sizeof(JT808Conf_struct));
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):					rt_kprintf("\r\n 缺省距离汇报间隔: %d m\r\n",JT808Conf_struct.DISTANCE.Defalut_DistDelta); 
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):					JT808Conf_struct.DISTANCE.NoDrvLogin_Dist=(Content[0]<<24)+(Content[1]<<16)+(Content[2]<<8) +Content[3];
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):                    Api_Config_Recwrite_Large(jt808,0,(u8*)&JT808Conf_struct,sizeof(JT808Conf_struct)); 
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):					rt_kprintf("\r\n 驾驶员未登录汇报距离: %d m\r\n",JT808Conf_struct.DISTANCE.NoDrvLogin_Dist); 
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):					JT808Conf_struct.DISTANCE.Sleep_Dist=(Content[0]<<24)+(Content[1]<<16)+(Content[2]<<8) +Content[3];
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):                    Api_Config_Recwrite_Large(jt808,0,(u8*)&JT808Conf_struct,sizeof(JT808Conf_struct));
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):					rt_kprintf("\r\n 休眠时定距上报间隔: %d m\r\n",JT808Conf_struct.DISTANCE.Sleep_Dist); 
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):					JT808Conf_struct.DISTANCE.Emergen_Dist=(Content[0]<<24)+(Content[1]<<16)+(Content[2]<<8) +Content[3];
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):                    Api_Config_Recwrite_Large(jt808,0,(u8*)&JT808Conf_struct,sizeof(JT808Conf_struct));
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):					rt_kprintf("\r\n 紧急报警时定距上报间隔: %d m\r\n",JT808Conf_struct.DISTANCE.Emergen_Dist); 
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):					JT808Conf_struct.DURATION.SD_Delta_maxAngle=(Content[0]<<24)+(Content[1]<<16)+(Content[2]<<8) +Content[3];
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):                    Api_Config_Recwrite_Large(jt808,0,(u8*)&JT808Conf_struct,sizeof(JT808Conf_struct));
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):					rt_kprintf("\r\n 拐点补传角度: %d 度\r\n",JT808Conf_struct.DISTANCE.Emergen_Dist);  
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):					JT808Conf_struct.DURATION.IllgleMovo_disttance=(Content[0]<<8)+Content[1]; 
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):                    Api_Config_Recwrite_Large(jt808,0,(u8*)&JT808Conf_struct,sizeof(JT808Conf_struct));
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):					rt_kprintf("\r\n 电子围栏半径(非法移动阈值): %d m\r\n",JT808Conf_struct.DURATION.IllgleMovo_disttance);  
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):					i=strlen((const char*)JT808Conf_struct.LISTEN_Num);
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):					rt_kprintf("\r\n old: %s \r\n",JT808Conf_struct.LISTEN_Num);
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):					memset(JT808Conf_struct.LISTEN_Num,0,sizeof(JT808Conf_struct.LISTEN_Num));
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):					memcpy(JT808Conf_struct.LISTEN_Num,Content,infolen);											
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):					Api_Config_Recwrite_Large(jt808,0,(u8*)&JT808Conf_struct,sizeof(JT808Conf_struct));  
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808): 					rt_kprintf("\r\n new: %s \r\n",JT808Conf_struct.LISTEN_Num);
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):	                rt_kprintf("\r\n 设置监控平台号码: %s \r\n",JT808Conf_struct.LISTEN_Num);   
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):					memset(JT808Conf_struct.LISTEN_Num,0,sizeof(JT808Conf_struct.LISTEN_Num));
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):					memcpy(JT808Conf_struct.LISTEN_Num,Content,infolen); 										
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):					Api_Config_Recwrite_Large(jt808,0,(u8*)&JT808Conf_struct,sizeof(JT808Conf_struct));  
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):					rt_kprintf("\r\n 立即拨打监听号码: %s \r\n",JT808Conf_struct.LISTEN_Num);  
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):				    JT808Conf_struct.Speed_warn_MAX=(Content[0]<<24)+(Content[1]<<16)+(Content[2]<<8)	+Content[3];
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):				   memcpy(reg_str,& JT808Conf_struct.Speed_warn_MAX,4);
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):				   memcpy(reg_str+4,&JT808Conf_struct.Spd_Exd_LimitSeconds,4);
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):				    Api_Config_Recwrite_Large(jt808,0,(u8*)&JT808Conf_struct,sizeof(JT808Conf_struct));
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):				   rt_kprintf("\r\n 最高速度: %d km/h \r\n", JT808Conf_struct.Speed_warn_MAX); 
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):				   JT808Conf_struct.Spd_Exd_LimitSeconds=(Content[0]<<24)+(Content[1]<<16)+(Content[2]<<8)	+Content[3];
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):				   memcpy(reg_str,& JT808Conf_struct.Speed_warn_MAX,4);
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):				   memcpy(reg_str+4,&JT808Conf_struct.Spd_Exd_LimitSeconds,4); 
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):				    Api_Config_Recwrite_Large(jt808,0,(u8*)&JT808Conf_struct,sizeof(JT808Conf_struct));
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):				   rt_kprintf("\r\n 超时持续时间: %d s \r\n",JT808Conf_struct.Spd_Exd_LimitSeconds); 
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):                                Api_Config_Recwrite_Large(jt808,0,(u8*)&JT808Conf_struct,sizeof(JT808Conf_struct)); 
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):					JT808Conf_struct.Vechicle_Info.Dev_ProvinceID=(Content[0]<<8)+Content[1];
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):                                   Api_Config_Recwrite_Large(jt808,0,(u8*)&JT808Conf_struct,sizeof(JT808Conf_struct));
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):					rt_kprintf("\r\n 车辆所在省域ID: 0x%X \r\n",JT808Conf_struct.Vechicle_Info.Dev_ProvinceID); 
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):					JT808Conf_struct.Vechicle_Info.Dev_ProvinceID=(Content[0]<<8)+Content[1];
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):                                   Api_Config_Recwrite_Large(jt808,0,(u8*)&JT808Conf_struct,sizeof(JT808Conf_struct));
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):					rt_kprintf("\r\n 车辆所在市域ID: 0x%X \r\n",JT808Conf_struct.Vechicle_Info.Dev_ProvinceID); 
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):					memset(JT808Conf_struct.Vechicle_Info.Vech_Num,0,sizeof(JT808Conf_struct.Vechicle_Info.Vech_Num));
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):					memcpy(JT808Conf_struct.Vechicle_Info.Vech_Num,Content,infolen);
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):                                   Api_Config_Recwrite_Large(jt808,0,(u8*)&JT808Conf_struct,sizeof(JT808Conf_struct));
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):					rt_kprintf("\r\n 机动车驾驶证号: %s  \r\n",JT808Conf_struct.Vechicle_Info.Vech_Num);  
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):					JT808Conf_struct.Vechicle_Info.Dev_Color=Content[0];           
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):                                   Api_Config_Recwrite_Large(jt808,0,(u8*)&JT808Conf_struct,sizeof(JT808Conf_struct));
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):					rt_kprintf("\r\n 车辆颜色: %d  \r\n",JT808Conf_struct.Vechicle_Info.Dev_Color);                 
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):				memset(JT808Conf_struct.Driver_Info.DriverCard_ID,0,18);
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):				memcpy(JT808Conf_struct.Driver_Info.DriveCode,Instr,3); 						   
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):			       memcpy(JT808Conf_struct.Driver_Info.DriverCard_ID,Instr+3,18); //只要驾驶证号码
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):				 Api_Config_Recwrite_Large(jt808,0,(u8*)&JT808Conf_struct,sizeof(JT808Conf_struct));
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):				memset((u8*)&JT808Conf_struct.Vechicle_Info,0,sizeof(JT808Conf_struct.Vechicle_Info));		
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):                memcpy(JT808Conf_struct.Vechicle_Info.Vech_VIN,Instr,17);
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):				memcpy(JT808Conf_struct.Vechicle_Info.Vech_Num,Instr+17,12);
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):				memcpy(JT808Conf_struct.Vechicle_Info.Vech_Type,Instr+29,12); 
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):				Api_Config_Recwrite_Large(jt808,0,(u8*)&JT808Conf_struct,sizeof(JT808Conf_struct));    
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):				 JT808Conf_struct.Vech_Character_Value=(u32)(Instr[0]<<16)+(u32)(Instr[1]<<8)+(u32)Instr[2]; // 特征系数  速度脉冲系数
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):				 JT808Conf_struct.DF_K_adjustState=0;		
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):	                      Api_Config_Recwrite_Large(jt808,0,(u8*)&JT808Conf_struct,sizeof(JT808Conf_struct));   
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):                                        JT808Conf_struct.DURATION.TCP_ACK_DurCnter=0;//clear
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):                                        JT808Conf_struct.DURATION.TCP_SD_state=0; //clear
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808): 										 memcpy(Reg_buf,JT808Conf_struct.ConfirmCode,20);
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808): 										 JT808Conf_struct.Regsiter_Status=0; 
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808): 										 Reg_buf[20]=JT808Conf_struct.Regsiter_Status; 
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808): 										Api_Config_Recwrite_Large(jt808,0,(u8*)&JT808Conf_struct,sizeof(JT808Conf_struct));   
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):							           memset(JT808Conf_struct.ConfirmCode,0,sizeof(JT808Conf_struct.ConfirmCode));
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):                                       memcpy(JT808Conf_struct.ConfirmCode,UDP_HEX_Rx+16,infolen-3);
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):							           memcpy(Reg_buf,JT808Conf_struct.ConfirmCode,20);
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):									   JT808Conf_struct.Regsiter_Status=1; 
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):							               Reg_buf[20]=JT808Conf_struct.Regsiter_Status;
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):                                                                Api_Config_Recwrite_Large(jt808,0,(u8*)&JT808Conf_struct,sizeof(JT808Conf_struct));   
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):									   rt_kprintf("鉴权码: %s\r\n		   鉴权码长度: %d\r\n",JT808Conf_struct.ConfirmCode,strlen((const char*)JT808Conf_struct.ConfirmCode)); 
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):								           if(0==JT808Conf_struct.Regsiter_Status)  
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):				                                          ;//JT808Conf_struct.Regsiter_Status=2;  // not  1
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):													   if(1==JT808Conf_struct.Regsiter_Status) 
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):					     JT808Conf_struct.RT_LOCK.Lock_Dur=(UDP_HEX_Rx[13]<<8)+UDP_HEX_Rx[14];
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):                         JT808Conf_struct.RT_LOCK.Lock_KeepDur=(UDP_HEX_Rx[15]<<24)+(UDP_HEX_Rx[16]<<16)+(UDP_HEX_Rx[17]<<8)+UDP_HEX_Rx[18];
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):                         JT808Conf_struct.RT_LOCK.Lock_state=1;    // Enable Flag
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):						 JT808Conf_struct.RT_LOCK.Lock_KeepCnter=0;  //  保持计数器
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):						 Current_SD_Duration=JT808Conf_struct.RT_LOCK.Lock_KeepDur;  //更改发送间隔						 
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):						 JT808Conf_struct.SD_MODE.DUR_TOTALMODE=1;   // 更新定时相关状态位
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):						 JT808Conf_struct.SD_MODE.Dur_DefaultMode=1;
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):						 Api_Config_Recwrite_Large(jt808,0,(u8*)&JT808Conf_struct,sizeof(JT808Conf_struct));
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):	 					  memset(JT808Conf_struct.LISTEN_Num,0,sizeof(JT808Conf_struct.LISTEN_Num));
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):	 					  memcpy(JT808Conf_struct.LISTEN_Num,UDP_HEX_Rx+14,infolen-1);  										  
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):                                            Api_Config_Recwrite_Large(jt808,0,(u8*)&JT808Conf_struct,sizeof(JT808Conf_struct));   
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):                             memcpy(UpReg+Up_wr,JT808Conf_struct.Driver_Info.DriverCard_ID,18); //信息内容
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):							 memcpy(UpReg+Up_wr,JT808Conf_struct.Driver_Info.DriveName,21);
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):                             memcpy(UpReg+Up_wr,(u8*)JT808Conf_struct.FirstSetupDate,6);
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):							 regdis=JT808Conf_struct.Distance_m_u32/100;  //单位0.1km 
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):                             UpReg[Up_wr++]=(u8)(JT808Conf_struct.Vech_Character_Value<<24);
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):							 UpReg[Up_wr++]=(u8)(JT808Conf_struct.Vech_Character_Value<<16);
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):							 UpReg[Up_wr++]=(u8)(JT808Conf_struct.Vech_Character_Value<<8);
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):							 UpReg[Up_wr++]=(u8)(JT808Conf_struct.Vech_Character_Value); 
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):                             memcpy(UpReg+Up_wr,JT808Conf_struct.Vechicle_Info.Vech_VIN,17); //信息内容
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):							 memcpy(UpReg+Up_wr,JT808Conf_struct.Vechicle_Info.Vech_Num,12);
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):							 memcpy(UpReg+Up_wr,JT808Conf_struct.Vechicle_Info.Vech_Type,12);  
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):							/*  memset(JT808Conf_struct.Vechicle_Info.Vech_VIN,0,18);
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):							  memset(JT808Conf_struct.Vechicle_Info.Vech_Num,0,13);
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):							  memset(JT808Conf_struct.Vechicle_Info.Vech_Type,0,13); 
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):							  memcpy(JT808Conf_struct.Vechicle_Info.Vech_VIN,InStr,17);
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):							  memcpy(JT808Conf_struct.Vechicle_Info.Vech_Num,InStr+17,12);
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):							  memcpy(JT808Conf_struct.Vechicle_Info.Vech_Type,InStr+29,12);  
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):							  Api_Config_Recwrite_Large(jt808,0,(u8*)&JT808Conf_struct,sizeof(JT808Conf_struct));  
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):						//	 JT808Conf_struct.Vech_Character_Value=((u32)(*InStr)<<24)+((u32)(*InStr+1)<<16)+((u32)(*InStr+2)<<8)+(u32)(*InStr+3); // 特征系数	速度脉冲系数
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):						//	 Api_Config_Recwrite_Large(jt808,0,(u8*)&JT808Conf_struct,sizeof(JT808Conf_struct));  
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):				    memset(JT808Conf_struct.Vechicle_Info.Vech_VIN,0,sizeof(JT808Conf_struct.Vechicle_Info.Vech_VIN));
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):				    memset(JT808Conf_struct.Vechicle_Info.Vech_Num,0,sizeof(JT808Conf_struct.Vechicle_Info.Vech_Num));
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):				    memset(JT808Conf_struct.Vechicle_Info.Vech_Type,0,sizeof(JT808Conf_struct.Vechicle_Info.Vech_Type)); 	
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):					 memcpy(JT808Conf_struct.Vechicle_Info.Vech_VIN,instr,17);
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):					 memcpy(JT808Conf_struct.Vechicle_Info.Vech_Num,instr+17,12);
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):					 memcpy(JT808Conf_struct.Vechicle_Info.Vech_Type,instr+29,12); 
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):				 	Api_Config_Recwrite_Large(jt808,0,(u8*)&JT808Conf_struct,sizeof(JT808Conf_struct));   
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):                             memcpy(JT808Conf_struct.FirstSetupDate,instr,6); 
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):				  Api_Config_Recwrite_Large(jt808,0,(u8*)&JT808Conf_struct,sizeof(JT808Conf_struct));
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):				  JT808Conf_struct.Vech_Character_Value=(u32)(instr[0]<<24)+(u32)(instr[1]<<16)+(u32)(instr[2]<<8)+(u32)(instr[3]); // 特征系数	速度脉冲系数
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):				  Api_Config_Recwrite_Large(jt808,0,(u8*)&JT808Conf_struct,sizeof(JT808Conf_struct));   
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):					 if(  JT808Conf_struct.Speed_warn_MAX >0 )   //> 0 
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):							 if  ( GPS_speed>( JT808Conf_struct.Speed_warn_MAX*10) )//(小小)
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):							// if( DebugSpd > ( JT808Conf_struct.Speed_warn_MAX*10) ) 
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):											 if ( speed_Exd.dur_seconds >JT808Conf_struct.Spd_Exd_LimitSeconds)   
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):								if((InflexDelta_Accumulate>=3)&&(InflexDelta_Accumulate>JT808Conf_struct.DURATION.SD_Delta_maxAngle)&&(InflexDelta_Accumulate<=180))
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):					   if((InflexDelta_Accumulate>=3)&&(InflexDelta_Accumulate>JT808Conf_struct.DURATION.SD_Delta_maxAngle)&&(InflexDelta_Accumulate<=180))
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):								if((InflexDelta_Accumulate>=3)&&(InflexDelta_Accumulate>JT808Conf_struct.DURATION.SD_Delta_maxAngle)&&(InflexDelta_Accumulate<=180))
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):						  if((InflexDelta_Accumulate>=3)&&(InflexDelta_Accumulate>JT808Conf_struct.DURATION.SD_Delta_maxAngle)&&(InflexDelta_Accumulate<=180))
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):				   if(JT808Conf_struct.RT_LOCK.Lock_state!=1)
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):				   Current_SD_Duration=JT808Conf_struct.DURATION.Sleep_Dur; // 5分钟 
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):				   //JT808Conf_struct.DURATION.Heart_SDCnter=25; 
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):				   //JT808Conf_struct.DURATION.Heart_Dur=320; 
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):   if(JT808Conf_struct.RT_LOCK.Lock_state!=1)
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):       Current_SD_Duration=JT808Conf_struct.DURATION.Default_Dur; 
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):   JT808Conf_struct.DURATION.Heart_Dur=300;  
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):	memcpy(content+wr_add,JT808Conf_struct.Driver_Info.DriverCard_ID,18);
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):         memcpy(content+wr_add,JT808Conf_struct.Driver_Info.DriverCard_ID,18);
Protocol_808.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):                Api_Config_Recwrite_Large(jt808,0,(u8*)&JT808Conf_struct,sizeof(JT808Conf_struct)); 
Sys_config.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):JT808_CONF       JT808Conf_struct;   //  JT 808   相关配置 
Sys_config.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):       JT808Conf_struct.DURATION.Heart_Dur=300;       // 心跳包发送间隔
Sys_config.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):	JT808Conf_struct.DURATION.TCP_ACK_Dur=20;     //  TCP 应答超时
Sys_config.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):	JT808Conf_struct.DURATION.TCP_ReSD_Num=3;     //  TCP 重发次数
Sys_config.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):	JT808Conf_struct.DURATION.TCP_ACK_Dur=20;     //  UDP 应答超时
Sys_config.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):	JT808Conf_struct.DURATION.UDP_ReSD_Num=5;     //  UDP 重发次数
Sys_config.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808): 	JT808Conf_struct.DURATION.NoDrvLogin_Dur=40;  //  驾驶员没登陆时的发送间隔
Sys_config.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808): 	JT808Conf_struct.DURATION.Sleep_Dur=30;       //  休眠时上报的时间间隔    
Sys_config.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):	JT808Conf_struct.DURATION.Emegence_Dur=20;    //  紧急报警时上报时间间隔
Sys_config.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):	JT808Conf_struct.DURATION.Default_Dur=30;     //  缺省情况下上报的时间间隔
Sys_config.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):	JT808Conf_struct.DURATION.SD_Delta_maxAngle=60; // 拐点补传的最大角度
Sys_config.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):	JT808Conf_struct.DURATION.IllgleMovo_disttance=300; // 非法移动阈值  
Sys_config.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):   JT808Conf_struct.DISTANCE.Defalut_DistDelta=200;    // 默认定距回传距离
Sys_config.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):   JT808Conf_struct.DISTANCE.NoDrvLogin_Dist=300;      // 驾驶员未登录时回传距离
Sys_config.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):   JT808Conf_struct.DISTANCE.Sleep_Dist=500;           // 休眠情况下上报的定距回传
Sys_config.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):   JT808Conf_struct.DISTANCE.Emergen_Dist=100;         // 紧急报警情况下上报的定距回传 
Sys_config.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):  JT808Conf_struct.SD_MODE.DUR_TOTALMODE=1;  // 使能定时发送
Sys_config.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):  JT808Conf_struct.SD_MODE.Dur_DefaultMode=1; //  缺省方式上报
Sys_config.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):  JT808Conf_struct.SD_MODE.Dur_EmegencMode=0;
Sys_config.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):  JT808Conf_struct.SD_MODE.Dur_NologinMode=0;
Sys_config.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):  JT808Conf_struct.SD_MODE.Dur_SleepMode=0;
Sys_config.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):  JT808Conf_struct.SD_MODE.DIST_TOTALMODE=0;
Sys_config.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):  JT808Conf_struct.SD_MODE.Dist_DefaultMode=0;
Sys_config.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):  JT808Conf_struct.SD_MODE.Dist_EmgenceMode=0;
Sys_config.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):  JT808Conf_struct.SD_MODE.Dist_NoLoginMode=0;
Sys_config.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):  JT808Conf_struct.SD_MODE.Dist_SleepMode=0;
Sys_config.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):   JT808Conf_struct.RT_LOCK.Lock_state=0;
Sys_config.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):   JT808Conf_struct.RT_LOCK.Lock_Dur=20;   
Sys_config.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):   JT808Conf_struct.RT_LOCK.Lock_KeepDur=300;
Sys_config.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):   JT808Conf_struct.RT_LOCK.Lock_KeepCnter=0;
Sys_config.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):	memset((u8*)&JT808Conf_struct.Vechicle_Info,0,sizeof(JT808Conf_struct.Vechicle_Info));
Sys_config.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):	memcpy(JT808Conf_struct.Vechicle_Info.Vech_VIN,"00000000000000000",17);
Sys_config.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):	memcpy(JT808Conf_struct.Vechicle_Info.Vech_Num,"津TST002",8);        
Sys_config.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):	memcpy(JT808Conf_struct.Vechicle_Info.Vech_Type,"未知型",6);       
Sys_config.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):	JT808Conf_struct.Vechicle_Info.Dev_ProvinceID=0;  // 默认省ID   0
Sys_config.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):	JT808Conf_struct.Vechicle_Info.Dev_CityID=0;      // 默认市ID   0		
Sys_config.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):	JT808Conf_struct.Vechicle_Info.Dev_Color=1;       // 默认颜色    // JT415    1  蓝 2 黄 3 黑 4 白 9其他     
Sys_config.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):                    memset((u8*)&(JT808Conf_struct),0,sizeof(JT808Conf_struct)); 	  // 驾驶员信息						
Sys_config.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):                         //  JT808Conf_struct.
Sys_config.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):		   JT808Conf_struct.LOAD_STATE=1; //  负载状态
Sys_config.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):		   memset((u8*)JT808Conf_struct.ConfirmCode,0,sizeof(JT808Conf_struct.ConfirmCode));
Sys_config.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):		   memcpy((u8*)JT808Conf_struct.ConfirmCode,"012345\x00",7); //  鉴权码
Sys_config.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):		   JT808Conf_struct.Regsiter_Status=0;   //  注册状态
Sys_config.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):		   memset((u8*)JT808Conf_struct.LISTEN_Num,0,sizeof(JT808Conf_struct.LISTEN_Num));
Sys_config.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):		   memcpy((u8*)JT808Conf_struct.LISTEN_Num,"10086",5); //  监听号码
Sys_config.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):                 JT808Conf_struct.Vech_Character_Value=6240; // 特征系数  速度脉冲系数 
Sys_config.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):		   memset((u8*)JT808Conf_struct.FirstSetupDate,0,sizeof(JT808Conf_struct.FirstSetupDate));
Sys_config.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):		   memcpy((u8*)JT808Conf_struct.FirstSetupDate,FirstUseDate,6); // 首次安装时间
Sys_config.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):                 memset((u8*)JT808Conf_struct.DeviceOnlyID,0,sizeof(JT808Conf_struct.DeviceOnlyID));
Sys_config.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):		   memcpy((u8*)JT808Conf_struct.DeviceOnlyID,"00000010000000000000001",23);   //   行车记录仪的唯一ID
Sys_config.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):		   JT808Conf_struct.Msg_Float_ID=0;   // 消息流水号
Sys_config.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):                JT808Conf_struct.Distance_m_u32=0;            //  行驶记录仪行驶里程  单位: 米
Sys_config.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):                JT808Conf_struct.DayStartDistance_32=0;     //  每天的起始里程数目
Sys_config.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):                JT808Conf_struct.Speed_warn_MAX=200;           // 速度最报警门限(小小)
Sys_config.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):                JT808Conf_struct.Spd_Exd_LimitSeconds=10;  //  超速报警持续时间门限 s(小小)
Sys_config.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):                JT808Conf_struct.Speed_GetType=0;             //  记录仪获取速度的方式  00  gps取速度  01 表示从传感器去速度 
Sys_config.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):                JT808Conf_struct.DF_K_adjustState=0; // 特征系数自动校准状态说明  1:自动校准过    0:尚未自动校准   
Sys_config.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):                JT808Conf_struct.OutGPS_Flag=1;     //  0  默认  1  接外部有源天线 
Sys_config.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):                JT808Conf_struct.concuss_step=40;
Sys_config.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):                        JT808Conf_struct.password_flag=0;//初次为0，设置好后为1 
Sys_config.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):	                 JT808Conf_struct.password_flag=1;//初次为0，设置好后为1  
Sys_config.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):                 memset((u8*)&(JT808Conf_struct.StdVersion),0,sizeof(JT808Conf_struct.StdVersion));  // 标准国家版本 
Sys_config.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):  		   memcpy((u8*)(JT808Conf_struct.StdVersion.stdverStr),"GB/T19056-2011",14); // 标准版本 
Sys_config.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):  	          JT808Conf_struct.StdVersion.MdfyID=0x02; //修改单号
Sys_config.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):		  memset((u8*)&(JT808Conf_struct.Driver_Info),0,sizeof(JT808Conf_struct.Driver_Info)); 	  // 驾驶员信息						
Sys_config.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):		  memcpy(JT808Conf_struct.Driver_Info.DriveCode,"000",3);  
Sys_config.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):		  memcpy(JT808Conf_struct.Driver_Info.DriverCard_ID,"000000000000000000",18);  
Sys_config.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):		  memcpy(JT808Conf_struct.Driver_Info.DriveName,"未知",4);   
Sys_config.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):		  memcpy(JT808Conf_struct.Driver_Info.Driver_ID,"000000000000000000",18);  
Sys_config.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):		  memcpy(JT808Conf_struct.Driver_Info.Drv_CareerID,"0000000000000000000000000000000000000000",40); 
Sys_config.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):		  memcpy(JT808Conf_struct.Driver_Info.Comfirm_agentID,"000000000000000",16);
Sys_config.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):            return(Api_Config_Recwrite_Large(jt808,0,(u8*)&JT808Conf_struct,sizeof(JT808Conf_struct)));       
Sys_config.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):     if(JT808Conf_struct.RT_LOCK.Lock_state==1)
Sys_config.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):       JT808Conf_struct.SD_MODE.DUR_TOTALMODE=1;
Sys_config.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):       Current_SD_Duration=JT808Conf_struct.RT_LOCK.Lock_Dur;
Sys_config.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):	   if(JT808Conf_struct.RT_LOCK.Lock_KeepCnter>JT808Conf_struct.RT_LOCK.Lock_KeepDur)
Sys_config.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):		   Api_Config_Recwrite_Large(jt808,0,(u8*)&JT808Conf_struct,sizeof(JT808Conf_struct));
Sys_config.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):    if(1==JT808Conf_struct.SD_MODE.DUR_TOTALMODE)
Sys_config.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):		if(1==JT808Conf_struct.SD_MODE.Dur_EmegencMode)
Sys_config.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):            Current_SD_Duration=JT808Conf_struct.DURATION.Emegence_Dur;
Sys_config.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):        if(1==JT808Conf_struct.SD_MODE.Dur_DefaultMode)
Sys_config.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):            Current_SD_Duration=JT808Conf_struct.DURATION.Default_Dur;
Sys_config.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):        if(1==JT808Conf_struct.SD_MODE.Dur_NologinMode)
Sys_config.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):            Current_SD_Duration=JT808Conf_struct.DURATION.NoDrvLogin_Dur;
Sys_config.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):		if(1==JT808Conf_struct.SD_MODE.Dur_SleepMode)
Sys_config.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):            Current_SD_Duration=JT808Conf_struct.DURATION.Sleep_Dur;
Sys_config.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):	if(1==JT808Conf_struct.SD_MODE.DIST_TOTALMODE)
Sys_config.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):        if(1==JT808Conf_struct.SD_MODE.Dist_EmgenceMode) 
Sys_config.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):            Current_State=JT808Conf_struct.DISTANCE.Emergen_Dist;
Sys_config.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):		if(1==JT808Conf_struct.SD_MODE.Dist_DefaultMode) 
Sys_config.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):            Current_State=JT808Conf_struct.DISTANCE.Defalut_DistDelta;
Sys_config.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):        if(1==JT808Conf_struct.SD_MODE.Dist_NoLoginMode) 
Sys_config.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):            Current_State=JT808Conf_struct.DISTANCE.NoDrvLogin_Dist;
Sys_config.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):	    if(1==JT808Conf_struct.SD_MODE.Dist_SleepMode) 
Sys_config.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):            Current_State=JT808Conf_struct.DISTANCE.Sleep_Dist; 
Sys_config.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):    JT808Conf_struct.DURATION.Heart_SDCnter++;       
Sys_config.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):    if(JT808Conf_struct.DURATION.Heart_SDCnter>JT808Conf_struct.DURATION.Heart_Dur)  //超过心跳包设置的间隔
Sys_config.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):            JT808Conf_struct.DURATION.Heart_SDCnter=0;     
Sys_config.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):            JT808Conf_struct.DURATION.Heart_SDFlag=1; 
Sys_config.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):/*    if(1==JT808Conf_struct.DURATION.TCP_SD_state)
Sys_config.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):      JT808Conf_struct.DURATION.TCP_ACK_DurCnter++;
Sys_config.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):	  if(JT808Conf_struct.DURATION.TCP_ACK_DurCnter>JT808Conf_struct.DURATION.TCP_ACK_Dur) //发送应答定时
Sys_config.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):                 JT808Conf_struct.DURATION.TCP_ACK_DurCnter=0;
Sys_config.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):		  JT808Conf_struct.DURATION.Heart_SDFlag=1;         //重新发送
Sys_config.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):		  JT808Conf_struct.DURATION.TCP_ReSD_cnter++;
Sys_config.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):		  if(JT808Conf_struct.DURATION.TCP_ReSD_cnter>JT808Conf_struct.DURATION.TCP_ReSD_Num)  //重新发送次数判断
Sys_config.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):                        JT808Conf_struct.DURATION.TCP_ReSD_cnter=0;
Sys_config.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):       //  rt_kprintf("\r\n  sizeof(sysconfig): %d   sizeof(jt808): %d    sizeof(tiredconfig): %d   \r\n",sizeof(SysConf_struct),sizeof(JT808Conf_struct),sizeof(TiredConf_struct)); 
Sys_config.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):                 Api_Config_read(jt808,0,(u8*)&JT808Conf_struct,sizeof(JT808Conf_struct));   //  读取JT808   配置信息
Sys_config.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):		   if(JT808Conf_struct.DF_K_adjustState)  
Sys_config.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):       rt_kprintf(" %s\r\n		   鉴权码长度: %d\r\n",JT808Conf_struct.ConfirmCode,strlen((const char*)JT808Conf_struct.ConfirmCode));   
Sys_config.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):  if(JT808Conf_struct.Regsiter_Status)
Sys_config.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):  	   rt_kprintf("\r\n		   该终端已经注册过!    %d \r\n",JT808Conf_struct.Regsiter_Status);  
Sys_config.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):         rt_kprintf("\r\n         监听号码: %s \r\n",JT808Conf_struct.LISTEN_Num);  
Sys_config.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):         rt_kprintf("\r\n		   车辆唯一性编号: %35s \r\n",JT808Conf_struct.DeviceOnlyID);    
Sys_config.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):         rt_kprintf("\r\n		   上报速度获取方式: %d :",JT808Conf_struct.Speed_GetType);	  
Sys_config.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):         if(JT808Conf_struct.Speed_GetType)							
Sys_config.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):         rt_kprintf(" \r\n  ------------------------GPS 外接信号源状态 JT808Conf_struct.OutGPS_Flag= %d",JT808Conf_struct.OutGPS_Flag);  
Sys_config.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):         rt_kprintf("\r\n		   特征系数校准状态: %d :",JT808Conf_struct.DF_K_adjustState);	    
Sys_config.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):         if(JT808Conf_struct.DF_K_adjustState)					  	 
Sys_config.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):         rt_kprintf("\r\n		   累计里程: %d  米   ,  当日里程:   %d米\r\n",JT808Conf_struct.Distance_m_u32,JT808Conf_struct.Distance_m_u32-JT808Conf_struct.DayStartDistance_32);  	
Sys_config.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):         rt_kprintf("		   允许最大速度: %d  Km/h    超速报警持续时间门限: %d  s \r\n", JT808Conf_struct.Speed_warn_MAX,JT808Conf_struct.Spd_Exd_LimitSeconds);  		 
Sys_config.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):         rt_kprintf("\r\n		  国家标准版本: %14s \r\n",JT808Conf_struct.StdVersion.stdverStr);					  
Sys_config.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):         rt_kprintf("\r\n		  国家标准版本修改单号: %d \r\n",JT808Conf_struct.StdVersion.MdfyID); 
Sys_config.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):         rt_kprintf("\r\n		  特征系数(速度脉冲系数): %d \r\n",JT808Conf_struct.Vech_Character_Value); 					  
Sys_config.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):         rt_kprintf("\r\n		  初次安装日期: %X-%X-%X %X:%X:%X \r\n",JT808Conf_struct.FirstSetupDate[0],JT808Conf_struct.FirstSetupDate[1],JT808Conf_struct.FirstSetupDate[2],JT808Conf_struct.FirstSetupDate[3],JT808Conf_struct.FirstSetupDate[4],JT808Conf_struct.FirstSetupDate[5]);  
Sys_config.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):         DriveCode32=(JT808Conf_struct.Driver_Info.DriveCode[0]<<16)+(JT808Conf_struct.Driver_Info.DriveCode[1]<<8)+JT808Conf_struct.Driver_Info.DriveCode[2];
Sys_config.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):         rt_kprintf("\r\n		  机动车驾驶证号: %18s \r\n",JT808Conf_struct.Driver_Info.DriverCard_ID);  					  
Sys_config.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):         rt_kprintf("\r\n		  驾驶员姓名: %s \r\n",JT808Conf_struct.Driver_Info.DriveName); 					  
Sys_config.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):         rt_kprintf("\r\n		  驾驶员身份证: %20s \r\n",JT808Conf_struct.Driver_Info.Driver_ID); 					  
Sys_config.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):         rt_kprintf("\r\n		  驾驶员从业资格证: %40s \r\n",JT808Conf_struct.Driver_Info.Drv_CareerID); 
Sys_config.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):         rt_kprintf("\r\n		  发证机构: %s \r\n",JT808Conf_struct.Driver_Info.Comfirm_agentID);   
Sys_config.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):         rt_kprintf("\r\n		  车辆VIN号: %17s \r\n",JT808Conf_struct.Vechicle_Info.Vech_VIN);   
Sys_config.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):         rt_kprintf("\r\n		  车牌号码: %12s \r\n",JT808Conf_struct.Vechicle_Info.Vech_Num);  
Sys_config.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):         rt_kprintf("\r\n		  车牌分类: %12s \r\n",JT808Conf_struct.Vechicle_Info.Vech_Type);  
Sys_config.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):         rt_kprintf("\r\n        车辆所在省ID: %d \r\n",JT808Conf_struct.Vechicle_Info.Dev_ProvinceID);
Sys_config.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):         rt_kprintf("\r\n        车辆所在市ID: %d \r\n",JT808Conf_struct.Vechicle_Info.Dev_CityID); 
Sys_config.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):         rt_kprintf("\r\n        车辆颜色:   JT415    1  蓝 2 黄 3 黑 4 白 9其他----当前颜色 %d \r\n",JT808Conf_struct.Vechicle_Info.Dev_Color);  
Sys_config.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):         rt_kprintf("\r\n\r\n        心跳包发送间隔 =	%d s   TCP应答超时Dur = %d s	 TCP重传次数=%d 	驾驶员未登录时上报间隔= %d s\r\n",JT808Conf_struct.DURATION.Heart_Dur,JT808Conf_struct.DURATION.TCP_ACK_Dur,JT808Conf_struct.DURATION.TCP_ReSD_Num,JT808Conf_struct.DURATION.NoDrvLogin_Dur); 
Sys_config.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):         rt_kprintf("\r\n\r\n                                 UDP应答超时Dur = %d s	 UDP重传次数=%d 	                             \r\n",JT808Conf_struct.DURATION.UDP_ACK_Dur,JT808Conf_struct.DURATION.UDP_ReSD_Num);  
Sys_config.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):         rt_kprintf("\r\n        休眠时上报间隔 =	%d s   紧急报警时上报间隔 = %d s	缺省上报间隔=%d s	拐点上次角度= %d ° 非法移动阈值= %d m\r\n",JT808Conf_struct.DURATION.Sleep_Dur,JT808Conf_struct.DURATION.Emegence_Dur,JT808Conf_struct.DURATION.Default_Dur,JT808Conf_struct.DURATION.SD_Delta_maxAngle,JT808Conf_struct.DURATION.IllgleMovo_disttance); 
Sys_config.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):         rt_kprintf("\r\n\r\n		  缺省定距上报 =	 %d m	驾驶员未登录定距 = %d m	 休眠定距=%d m	 紧急报警定距= %d m \r\n",JT808Conf_struct.DISTANCE.Defalut_DistDelta,JT808Conf_struct.DISTANCE.NoDrvLogin_Dist,JT808Conf_struct.DISTANCE.Sleep_Dist,JT808Conf_struct.DISTANCE.Emergen_Dist); 
Sys_config.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):         rt_kprintf("\r\n\r\n		定时上报方式 = %d    定时缺省 = %d   定时未登录=%d  定时休眠=%d m   定时紧急= %d m \r\n",JT808Conf_struct.SD_MODE.DUR_TOTALMODE,JT808Conf_struct.SD_MODE.Dur_DefaultMode,JT808Conf_struct.SD_MODE.Dur_NologinMode,JT808Conf_struct.SD_MODE.Dur_SleepMode,JT808Conf_struct.SD_MODE.Dur_EmegencMode); 
Sys_config.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):         rt_kprintf("\r\n\r\n		定距上报方式 = %d    定距缺省 = %d   定距未登录=%d  定距休眠=%d m   定距紧急= %d m \r\n",JT808Conf_struct.SD_MODE.DIST_TOTALMODE,JT808Conf_struct.SD_MODE.Dist_DefaultMode,JT808Conf_struct.SD_MODE.Dist_NoLoginMode,JT808Conf_struct.SD_MODE.Dist_SleepMode,JT808Conf_struct.SD_MODE.Dist_EmgenceMode);  
Sys_config.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):         rt_kprintf("\r\n\r\n	   临时位置跟踪状态= %d    跟踪间隔 = %d  	持续时间=%d  持续当前计数器=%d  \r\n",JT808Conf_struct.RT_LOCK.Lock_state,JT808Conf_struct.RT_LOCK.Lock_Dur,JT808Conf_struct.RT_LOCK.Lock_KeepDur,JT808Conf_struct.RT_LOCK.Lock_KeepCnter);  
Sys_config.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):         switch(JT808Conf_struct.LOAD_STATE)
Sys_config.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):		       JT808Conf_struct.LOAD_STATE=1;
Sys_config.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):		       Api_Config_Recwrite_Large(jt808,0,(u8*)&JT808Conf_struct,sizeof(JT808Conf_struct));
Sys_config.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):            rt_kprintf("\r\n\r\n  起始流水号: %d \r\n", JT808Conf_struct.Msg_Float_ID); 
Sys_config.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):    Api_Config_Recwrite_Large(jt808,0,(u8*)&JT808Conf_struct,sizeof(JT808Conf_struct));  
Sys_config.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):              rt_kprintf(" %s\r\n		   鉴权码长度: %d\r\n",JT808Conf_struct.ConfirmCode,strlen((const char*)JT808Conf_struct.ConfirmCode));   
Sys_config.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):                   JT808Conf_struct.Regsiter_Status=0; 
Sys_config.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):                  memset(JT808Conf_struct.ConfirmCode,0,sizeof(JT808Conf_struct.ConfirmCode));
Sys_config.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):                  memcpy(JT808Conf_struct.ConfirmCode,str,strlen((const char*)str));
Sys_config.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):		     JT808Conf_struct.Regsiter_Status=1; 
Sys_config.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):		    rt_kprintf("     手动设置  鉴权码: %s\r\n",JT808Conf_struct.ConfirmCode);   
Sys_config.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):		    memcpy(Reg_buf,JT808Conf_struct.ConfirmCode,20);
Sys_config.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):		    JT808Conf_struct.Regsiter_Status=1; 
Sys_config.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):		    Reg_buf[20]=JT808Conf_struct.Regsiter_Status;			
Sys_config.c (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):                  Api_Config_Recwrite_Large(jt808,0,(u8*)&JT808Conf_struct,sizeof(JT808Conf_struct));   
Sys_config.h (bsp\stm32f407vgt6_recdrv\app_712\protocol_808):extern ALIGN(RT_ALIGN_SIZE)  JT808_CONF      JT808Conf_struct;   //  JT 808   相关配置 
